// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/db/gacha_probability/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gachaprobability "game-api/pkg/domain/model/gacha_probability"
	user "game-api/pkg/domain/model/user"
	usercollectionitem "game-api/pkg/domain/model/user_collection_item"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GachaSave mocks base method.
func (m *MockRepository) GachaSave(c echo.Context, records []*usercollectionitem.UserCollectionItem, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GachaSave", c, records, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GachaSave indicates an expected call of GachaSave.
func (mr *MockRepositoryMockRecorder) GachaSave(c, records, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GachaSave", reflect.TypeOf((*MockRepository)(nil).GachaSave), c, records, user)
}

// SelectAll mocks base method.
func (m *MockRepository) SelectAll() ([]*gachaprobability.GachaProbability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]*gachaprobability.GachaProbability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockRepositoryMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockRepository)(nil).SelectAll))
}
