// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/db/user/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	user "game-api/pkg/domain/model/user"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ID, authToken, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ID, authToken, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ID, authToken, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ID, authToken, name)
}

// SelectByAuthToken mocks base method.
func (m *MockRepository) SelectByAuthToken(authToken string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByAuthToken", authToken)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByAuthToken indicates an expected call of SelectByAuthToken.
func (mr *MockRepositoryMockRecorder) SelectByAuthToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByAuthToken", reflect.TypeOf((*MockRepository)(nil).SelectByAuthToken), authToken)
}

// SelectByPrimaryKey mocks base method.
func (m *MockRepository) SelectByPrimaryKey(userID string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByPrimaryKey", userID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByPrimaryKey indicates an expected call of SelectByPrimaryKey.
func (mr *MockRepositoryMockRecorder) SelectByPrimaryKey(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByPrimaryKey", reflect.TypeOf((*MockRepository)(nil).SelectByPrimaryKey), userID)
}

// Update mocks base method.
func (m *MockRepository) Update(user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), user)
}

// UpdateWithLock mocks base method.
func (m *MockRepository) UpdateWithLock(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithLock", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithLock indicates an expected call of UpdateWithLock.
func (mr *MockRepositoryMockRecorder) UpdateWithLock(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithLock", reflect.TypeOf((*MockRepository)(nil).UpdateWithLock), ctx, user)
}
